{"version":3,"sources":["pages/PageOne/BtnContainer.tsx","pages/PageOne/Count.tsx","router/routes.ts","pages/PageOne/PageOne.tsx","pages/PageTwo.tsx","layout/SiderMenu.tsx","layout/BaseHeader.tsx","layout/IframeBreadcurmb.tsx","layout/BaseLayout.tsx","App.tsx","index.tsx","mocks/handlers.js","mocks/browser.js"],"names":["RequestTypes","printMessage","status","responseText","requestType","message","success","JSON","parse","data","error","BtnContainer","history","useHistory","useState","isRenderError","setIsRenderError","onClickTriggerUnhandledrejection","a","promise","Promise","resolve","reject","Error","gutter","onClick","xhr","XMLHttpRequest","open","setRequestHeader","send","onreadystatechange","readyState","Xhr","fetch","method","then","res","text","Fetch","err","console","log","noObj","noField","push","DivWrapper","styled","span","Number","props","number","useSpring","from","count","delay","config","molasses","div","to","c","toFixed","Count","setCount","add","sub","useCount","style","marginBottom","marginRight","icon","PlusOutlined","MinusOutlined","routes","path","component","ErrorFallback","type","location","reload","onError","componentStack","fallback","meta","title","Sider","Layout","LogoWrapper","SiderMenu","curMenu","setCurMenu","useEffect","some","item","pathname","backgroundColor","value","key","theme","mode","selectedKeys","map","Item","Header","GithubOutlinedWrapper","GithubOutlined","HeaderWrapper","BaseHeader","window","IframeWrapper","iframe","IframeBreadcurmb","iframeRef","useRef","current","breadcrumb","MitoInstance","lastLength","setInterval","length","getStack","contentWindow","postMessage","stringify","ref","src","Content","BaseLayout","height","padding","description","showIcon","App","worker","require","init","apikey","dsn","maxBreadcrumbs","debug","silentConsole","enableTraceId","includeHttpUrlTraceIdRegExp","start","serviceWorker","url","ReactDOM","render","StrictMode","document","getElementById","handlers","rest","get","req","ctx","json","post","_","setupWorker"],"mappings":"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","file":"static/js/main.41969866.chunk.js","sourcesContent":["import { Button, Card, Col, message, Row } from 'antd'\nimport { useHistory } from 'react-router-dom'\nimport { useState } from 'react'\nenum RequestTypes {\n  Xhr = 'Xhr',\n  Fetch = 'Fetch',\n}\nconst printMessage = (status: number, responseText: string, requestType: RequestTypes) => {\n  if (status === 200) {\n    message.success(`${requestType}请求成功：${JSON.parse(responseText).data}`)\n  } else {\n    message.error(`${requestType}请求失败：${JSON.parse(responseText).data}`)\n  }\n}\nexport default function BtnContainer() {\n  const history = useHistory()\n  const [isRenderError, setIsRenderError] = useState(false)\n  const onClickNormalXhr = () => {\n    const xhr = new XMLHttpRequest()\n    xhr.open('get', '/normal')\n    xhr.setRequestHeader('content-type', 'application/json')\n    xhr.send()\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState === 4) {\n        printMessage(xhr.status, xhr.responseText, RequestTypes.Xhr)\n      }\n    }\n  }\n  const onClickAbnormalXhr = () => {\n    const xhr = new XMLHttpRequest()\n    xhr.open('get', '/abnormal')\n    xhr.setRequestHeader('content-type', 'application/json')\n    xhr.send()\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState === 4) {\n        printMessage(xhr.status, xhr.responseText, RequestTypes.Xhr)\n      }\n    }\n  }\n  const onClickNormalFetch = () => {\n    fetch('/normal', {\n      method: 'GET',\n    }).then(\n      res => {\n        res.text().then(responseText => {\n          printMessage(res.status, responseText, RequestTypes.Fetch)\n        })\n      },\n      err => {\n        console.log('err', err)\n      }\n    )\n  }\n  const onClickAbnormalFetch = () => {\n    fetch('/abnormal', {\n      method: 'GET',\n    }).then(\n      res => {\n        res.text().then(responseText => {\n          printMessage(res.status, responseText, RequestTypes.Fetch)\n        })\n      },\n      err => {\n        console.log('err', err)\n      }\n    )\n  }\n  const onClickTriggerUnhandledrejection = async () => {\n    const promise = new Promise((resolve, reject) => {\n      reject('this is a reject message in Promise')\n    })\n    await promise\n  }\n  const onClickTriggerCodeError = () => {\n    const obj = {} as any\n    // create code error\n    obj.noObj.noField = 'no field'\n  }\n  const onClickPushRoute = () => {\n    history.push('/page-two')\n  }\n  const onClickMitoLog = () => {\n    // log({\n    //   message: 'this is message',\n    //   tag: 'this is tag',\n    // })\n  }\n  const onClickRenderError = () => {\n    setIsRenderError(true)\n  }\n  if (isRenderError) {\n    throw new Error('is Render error')\n  } else {\n    return (\n      <Card>\n        <Row gutter={[10, 10]}>\n          <Col>\n            <Button onClick={onClickNormalXhr}>触发正常Xhr</Button>\n          </Col>\n          <Col>\n            <Button onClick={onClickAbnormalXhr}>触发异常Xhr</Button>\n          </Col>\n          <Col>\n            <Button onClick={onClickNormalFetch}>触发正常Fetch</Button>\n          </Col>\n          <Col>\n            <Button onClick={onClickAbnormalFetch}>触发异常Fetch</Button>\n          </Col>\n          <Col>\n            <Button onClick={onClickTriggerUnhandledrejection}>触发Promise错误</Button>\n          </Col>\n          <Col>\n            <Button onClick={onClickTriggerCodeError}>触发代码错误</Button>\n          </Col>\n          <Col>\n            <Button onClick={onClickMitoLog}>手动上报MITO.log</Button>\n          </Col>\n          <Col>\n            <Button onClick={onClickRenderError}>触发render错误</Button>\n          </Col>\n          <Col>\n            <Button onClick={onClickPushRoute}>路由跳转</Button>\n          </Col>\n        </Row>\n      </Card>\n    )\n  }\n}\n","import { Button, Card, Col, Row } from 'antd'\nimport React, { useState } from 'react'\nimport { PlusOutlined, MinusOutlined } from '@ant-design/icons'\nimport styled from 'styled-components'\nimport { animated, config, useSpring } from 'react-spring'\nconst useCount = () => {\n  const [count, setCount] = useState<number>(0)\n  const add = () => {\n    setCount(count + 1)\n  }\n  const sub = () => {\n    setCount(count - 1)\n  }\n  return { count, add, sub }\n}\nconst DivWrapper = styled.span`\n  font-size: 26px;\n  display: flex;\n  justify-content: flex-start;\n`\nfunction Number(props: { count: number }) {\n  const { number } = useSpring({\n    // reset: true,\n    // reverse: flip,\n    from: { number: 0 },\n    number: props.count,\n    delay: 200,\n    config: config.molasses,\n    // onRest: () => set(!flip),\n  })\n\n  return <animated.div>{number.to(c => c.toFixed(1))}</animated.div>\n}\nexport default function Count() {\n  const { count, add, sub } = useCount()\n  return (\n    <Card style={{ marginBottom: '10px' }}>\n      <Row gutter={[0, 10]}>\n        <Col span={24}>\n          <DivWrapper>\n            <div>Count: </div>\n            <Number count={count}></Number>\n          </DivWrapper>\n        </Col>\n        <Button style={{ marginRight: '10px' }} onClick={add} icon={<PlusOutlined />}>\n          加\n        </Button>\n        <Button onClick={sub} icon={<MinusOutlined />}>\n          减\n        </Button>\n      </Row>\n    </Card>\n  )\n}\n","import PageOne from '../pages/PageOne/PageOne'\nimport PageTwo from '../pages/PageTwo'\n\nconst routes = [\n  {\n    path: '/page-one',\n    component: PageOne,\n    meta: {\n      title: '示例页面一',\n    },\n  },\n  {\n    path: '/page-two',\n    component: PageTwo,\n    meta: {\n      title: '示例页面二',\n    },\n  },\n]\n\nexport default routes\n","import { RouterProps } from 'react-router-dom'\nimport BtnContainer from './BtnContainer'\nimport Count from './Count'\nimport { ErrorBoundary } from '@mitojs/react'\nimport { Alert, Button, Card, Col, Row } from 'antd'\nexport default function PageOne(props: RouterProps) {\n  const onError = (error: Error, componentStack: string) => {\n    console.log('triggered is render error')\n    // console.log(error, componentStack)\n  }\n  const ErrorFallback = (\n    <Card>\n      <Row gutter={[20, 20]}>\n        <Col span={24}>\n          <Alert message='Oops，触发了render error' type='error'></Alert>\n        </Col>\n        <Col span={24}>\n          <Button type='primary' onClick={() => location.reload()}>\n            点击刷新\n          </Button>\n        </Col>\n      </Row>\n    </Card>\n  )\n\n  return (\n    <>\n      <Count></Count>\n      <ErrorBoundary onError={onError} fallback={ErrorFallback}>\n        <BtnContainer></BtnContainer>\n      </ErrorBoundary>\n    </>\n  )\n}\n","import { Button, Card } from 'antd'\nimport { useHistory } from 'react-router-dom'\n\nexport default function PageTwo() {\n  const history = useHistory()\n  return (\n    <Card>\n      <h1>这是示例页面二</h1>\n      <Button onClick={() => history.push('/page-one')}>跳转实例页面一</Button>\n    </Card>\n  )\n}\n","import { useEffect, useState } from 'react'\nimport { Layout, Menu } from 'antd'\nimport styled from 'styled-components'\nimport routes from '../router/routes'\nimport { useHistory } from 'react-router-dom'\nconst { Sider } = Layout\nconst LogoWrapper = styled.div`\n  font-size: 22px;\n  width: 100%;\n  height: 64px;\n  background-color: #1890ff;\n  color: white;\n  text-align: center;\n  line-height: 64px;\n`\nexport default function SiderMenu() {\n  const { location, push } = useHistory()\n  const [curMenu, setCurMenu] = useState<string>('')\n  useEffect(() => {\n    if (routes.some(item => item.path === location.pathname)) {\n      setCurMenu(location.pathname)\n    }\n  }, [location])\n  const handleClick = (value: { key: string }) => {\n    push(value.key)\n    setCurMenu(value.key)\n  }\n  return (\n    <Sider style={{ backgroundColor: 'white' }}>\n      <LogoWrapper>mitojs-react-demo</LogoWrapper>\n      <Menu onClick={handleClick} theme='light' mode='inline' selectedKeys={[curMenu]}>\n        {routes.map(item => (\n          <Menu.Item key={item.path}>{item.meta.title}</Menu.Item>\n        ))}\n      </Menu>\n    </Sider>\n  )\n}\n","import { Layout } from 'antd'\nimport { GithubOutlined } from '@ant-design/icons'\nimport styled from 'styled-components'\nconst { Header } = Layout\nconst GithubOutlinedWrapper = styled(GithubOutlined)`\n  font-size: 22px;\n  cursor: pointer;\n`\nconst HeaderWrapper = styled(Header)`\n  background-color: white;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n`\nconst BaseHeader = () => {\n  return (\n    <HeaderWrapper>\n      <GithubOutlinedWrapper onClick={() => window.open('https://github.com/mitojs/mitojs')} />\n    </HeaderWrapper>\n  )\n}\n\nexport default BaseHeader\n","import React, { useEffect, useRef } from 'react'\nimport styled from 'styled-components'\nimport { WindowType } from '..'\nconst IframeWrapper = styled.iframe`\n  width: 100%;\n  height: 100%;\n  border: none;\n`\nconst IframeBreadcurmb = () => {\n  const iframeRef = useRef(null)\n  useEffect(() => {\n    let iframe = iframeRef.current as any\n    const breadcrumb = (window as any as WindowType).MitoInstance.breadcrumb\n    let lastLength = -1\n    setInterval(() => {\n      const length = breadcrumb.getStack().length\n      if (length === lastLength) {\n        return\n      } else {\n        lastLength = length\n        iframe.contentWindow &&\n          iframe.contentWindow.postMessage(\n            {\n              type: 'breadcrumb',\n              data: JSON.parse(JSON.stringify(breadcrumb.getStack())),\n            },\n            'https://mitojs.github.io/mito-admin-demo/#/breadcrumbDemo'\n          )\n      }\n    }, 1000)\n  }, [])\n  return <IframeWrapper title='breadcrumb' ref={iframeRef} src='https://mitojs.github.io/mito-admin-demo/#/breadcrumbDemo'></IframeWrapper>\n}\n\nexport default IframeBreadcurmb\n","import { Redirect, Route, Switch } from 'react-router-dom'\nimport { Alert, Col, Layout, Row } from 'antd'\nimport SiderMenu from './SiderMenu'\nimport BaseHeader from './BaseHeader'\nimport routes from '../router/routes'\nimport IframeBreadcurmb from './IframeBreadcurmb'\nconst { Content } = Layout\n\nconst BaseLayout = () => {\n  return (\n    <Layout style={{ height: '100%' }}>\n      <SiderMenu />\n      <Layout>\n        <BaseHeader />\n        <Content style={{ padding: '10px' }}>\n          <Alert message='提示信息' description='右侧的Breadcrumb组件会实时打印的你操作行为。控制台会打印当前收集的信息' type='info' showIcon />\n          <Row style={{ padding: '10px 0' }} gutter={[10, 10]}>\n            <Col span={8}>\n              <Switch>\n                {routes.map(item => (\n                  <Route key={item.path} path={item.path} component={item.component}></Route>\n                ))}\n                <Redirect to={{ pathname: routes[0].path }}></Redirect>\n              </Switch>\n            </Col>\n            <Col span={16} style={{ height: '602px' }}>\n              <IframeBreadcurmb></IframeBreadcurmb>\n            </Col>\n          </Row>\n        </Content>\n      </Layout>\n    </Layout>\n  )\n}\n\nexport default BaseLayout\n","import './App.css'\nimport BaseLayout from './layout/BaseLayout'\nimport { HashRouter, Route, Switch } from 'react-router-dom'\n// import * as MITO from '@mitojs/web'\n// MITO.init({\n//   apikey: 'abc-123',\n//   dsn: '/upload',\n//   maxBreadcrumbs: 100,\n//   debug: true,\n//   silentConsole: true,\n//   enableTraceId: true,\n//   includeHttpUrlTraceIdRegExp: /.*/,\n// })\nfunction App() {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route path='/' component={BaseLayout}></Route>\n      </Switch>\n    </HashRouter>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nconst { worker } = require('./mocks/browser')\nimport { init, MitoProvider } from '@mitojs/react'\nimport { BrowserClient } from '@mitojs/browser'\nconst MitoInstance = init({\n  apikey: 'abc-123',\n  dsn: '/upload',\n  maxBreadcrumbs: 100,\n  debug: true,\n  silentConsole: true,\n  enableTraceId: true,\n  includeHttpUrlTraceIdRegExp: /.*/,\n})\n\n;(window as any as WindowType).MitoInstance = MitoInstance\nif (process.env.NODE_ENV === 'production') {\n  worker.start({\n    serviceWorker: {\n      url: '/react-sdk-demo/mockServiceWorker.js',\n    },\n  })\n} else {\n  worker.start()\n}\n\nexport interface WindowType extends Window {\n  MitoInstance: BrowserClient\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <MitoProvider MitoInstance={MitoInstance}>\n      <App />\n    </MitoProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n","import { rest } from 'msw'\n\nexport const handlers = [\n  rest.get('/normal', (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({\n        data: 'Normal Get Request',\n      })\n    )\n  }),\n  rest.get('/abnormal', (req, res, ctx) => {\n    return res(\n      ctx.status(500),\n      ctx.json({\n        data: 'Abnormal Get Request',\n      })\n    )\n  }),\n  rest.post('/upload', (_, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({\n        data: 'ok',\n      })\n    )\n  }),\n  // rest.post('/abnormal', (req, res, ctx) => {\n  //   return res(\n  //     ctx.status(500),\n  //     ctx.json({\n  //       data: 'Abnormal Post Request',\n  //     })\n  //   )\n  // }),\n]\n","// src/mocks/browser.js\nimport { setupWorker } from 'msw'\nimport { handlers } from './handlers'\n// This configures a Service Worker with the given request handlers.\nexport const worker = setupWorker(...handlers)\n"],"sourceRoot":""}