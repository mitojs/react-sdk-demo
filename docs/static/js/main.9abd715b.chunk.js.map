{"version":3,"sources":["pages/PageOne/BtnContainer.tsx","pages/PageOne/Count.tsx","components/XTopology/constants/graph.ts","components/XTopology/state/atoms/index.ts","components/XTopology/hooks/useGraph.ts","components/XTopology/hooks/useInitNodes.tsx","components/XTopology/Stencil/Stencil.tsx","components/XTopology/styles/style.less","components/XTopology/XTopology.tsx","router/routes.ts","pages/PageOne/PageOne.tsx","pages/PageTwo.tsx","pages/Topology/Topology.tsx","layout/SiderMenu.tsx","layout/BaseHeader.tsx","layout/BaseLayout.tsx","App.tsx","index.tsx","mocks/handlers.js","mocks/browser.js"],"names":["RequestTypes","printMessage","status","responseText","requestType","message","success","JSON","parse","data","error","BtnContainer","history","useHistory","useState","isRenderError","setIsRenderError","onClickTriggerUnhandledrejection","a","promise","Promise","resolve","reject","Error","gutter","onClick","xhr","XMLHttpRequest","open","setRequestHeader","send","onreadystatechange","readyState","Xhr","fetch","method","then","res","text","Fetch","err","console","log","noObj","noField","push","DivWrapper","styled","span","Number","props","number","useSpring","from","count","delay","config","molasses","div","to","c","toFixed","Count","setCount","add","sub","useCount","style","marginBottom","marginRight","icon","PlusOutlined","MinusOutlined","NodeEventNameTypes","EdgeEventNameTypes","xGraphAtom","atomWithReset","graph","nodes","id","x","y","width","height","label","shape","attrs","body","fill","stroke","strokeDasharray","fontSize","GraphSetting","background","color","grid","size","visible","name","edges","source","target","line","StencilContainer","StencilContent","NodeStyle","Dnd","Addon","StencilWrap","dndInstance","setDndInstance","useAtomValue","startDrag","useCallback","e","node","createNode","strokeWidth","ports","groups","group1","circle","r","magnet","items","group","start","nativeEvent","useEffect","dnd","scaled","animation","validateNode","droppingNode","options","setTimeout","onMouseDown","marginTop","consolaGlobalInstance","info","toJSON","TopologyCotainer","ContentContainer","XTopology","containerRef","useRef","contentRef","graphRef","minimapBoxRef","updateGraphState","useUpdateAtom","current","Graph","clientWidth","clientHeight","container","snapline","enabled","sharp","selecting","className","showNodeSelectionBox","prev","resize","debounce","resizeGraph","window","addEventListener","consola","removeEventListener","dispose","useGraph","fromJSON","useInitNodes","ref","routes","path","component","ErrorFallback","type","location","reload","onError","componentStack","fallback","meta","title","Sider","Layout","LogoWrapper","SiderMenu","curMenu","setCurMenu","some","item","pathname","backgroundColor","value","key","theme","mode","selectedKeys","map","Item","Header","GithubOutlinedWrapper","GithubOutlined","HeaderWrapper","BaseHeader","Content","BaseLayout","padding","App","worker","require","MitoInstance","init","apikey","dsn","maxBreadcrumbs","debug","silentConsole","enableTraceId","includeHttpUrlTraceIdRegExp","beforeAppAjaxSend","url","serviceWorker","ReactDOM","render","StrictMode","document","getElementById","handlers","rest","get","req","ctx","json","post","_","setupWorker"],"mappings":"uMAIKA,E,kLAAAA,K,UAAAA,E,eAAAA,M,KAIL,IAAMC,EAAe,SAACC,EAAgBC,EAAsBC,GAC3C,MAAXF,EACFG,IAAQC,QAAR,UAAmBF,EAAnB,yCAAsCG,KAAKC,MAAML,GAAcM,OAE/DJ,IAAQK,MAAR,UAAiBN,EAAjB,yCAAoCG,KAAKC,MAAML,GAAcM,QAGlD,SAASE,IACtB,IAAMC,EAAUC,cADqB,EAEKC,oBAAS,GAFd,mBAE9BC,EAF8B,KAEfC,EAFe,KAqD/BC,EAAgC,uCAAG,4BAAAC,EAAA,6DACjCC,EAAU,IAAIC,SAAQ,SAACC,EAASC,GACpCA,EAAO,0CAF8B,SAIjCH,EAJiC,2CAAH,qDAuBtC,GAAIJ,EACF,MAAM,IAAIQ,MAAM,mBAEhB,OACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAKC,OAAQ,CAAC,GAAI,IAAlB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAQC,QAhFO,WACvB,IAAMC,EAAM,IAAIC,eAChBD,EAAIE,KAAK,MAAO,WAChBF,EAAIG,iBAAiB,eAAgB,oBACrCH,EAAII,OACJJ,EAAIK,mBAAqB,WACA,IAAnBL,EAAIM,YACN/B,EAAayB,EAAIxB,OAAQwB,EAAIvB,aAAcH,EAAaiC,OAyEpD,2CAEF,cAAC,IAAD,UACE,cAAC,IAAD,CAAQR,QAxES,WACzB,IAAMC,EAAM,IAAIC,eAChBD,EAAIE,KAAK,MAAO,aAChBF,EAAIG,iBAAiB,eAAgB,oBACrCH,EAAII,OACJJ,EAAIK,mBAAqB,WACA,IAAnBL,EAAIM,YACN/B,EAAayB,EAAIxB,OAAQwB,EAAIvB,aAAcH,EAAaiC,OAiEpD,2CAEF,cAAC,IAAD,UACE,cAAC,IAAD,CAAQR,QAhES,WACzBS,MAAM,UAAW,CACfC,OAAQ,QACPC,MACD,SAAAC,GACEA,EAAIC,OAAOF,MAAK,SAAAjC,GACdF,EAAaoC,EAAInC,OAAQC,EAAcH,EAAauC,aAGxD,SAAAC,GACEC,QAAQC,IAAI,MAAOF,OAsDf,6CAEF,cAAC,IAAD,UACE,cAAC,IAAD,CAAQf,QArDW,WAC3BS,MAAM,YAAa,CACjBC,OAAQ,QACPC,MACD,SAAAC,GACEA,EAAIC,OAAOF,MAAK,SAAAjC,GACdF,EAAaoC,EAAInC,OAAQC,EAAcH,EAAauC,aAGxD,SAAAC,GACEC,QAAQC,IAAI,MAAOF,OA2Cf,6CAEF,cAAC,IAAD,UACE,cAAC,IAAD,CAAQf,QAASR,EAAjB,+CAEF,cAAC,IAAD,UACE,cAAC,IAAD,CAAQQ,QAvCc,YAClB,IAERkB,MAAMC,QAAU,YAoCZ,oDAEF,cAAC,IAAD,UACE,cAAC,IAAD,CAAQnB,QAlCK,aAkCb,gDAEF,cAAC,IAAD,UACE,cAAC,IAAD,CAAQA,QA/BS,WACzBT,GAAiB,IA8BT,8CAEF,cAAC,IAAD,UACE,cAAC,IAAD,CAAQS,QA3CO,WACvBb,EAAQiC,KAAK,cA0CL,6C,iCC3GNC,EAAaC,IAAOC,KAAV,kGAKhB,SAASC,EAAOC,GAA2B,IACjCC,EAAWC,oBAAU,CAG3BC,KAAM,CAAEF,OAAQ,GAChBA,OAAQD,EAAMI,MACdC,MAAO,IACPC,OAAQA,SAAOC,WANTN,OAUR,OAAO,cAAC,WAASO,IAAV,UAAeP,EAAOQ,IAAG,SAAAC,GAAC,OAAIA,EAAEC,QAAQ,QAElC,SAASC,IAAS,IAAD,EA5Bf,WAAO,IAAD,EACKhD,mBAAiB,GADtB,mBACdwC,EADc,KACPS,EADO,KAQrB,MAAO,CAAET,QAAOU,IANJ,WACVD,EAAST,EAAQ,IAKEW,IAHT,WACVF,EAAST,EAAQ,KAuBSY,GAApBZ,EADsB,EACtBA,MAAOU,EADe,EACfA,IAAKC,EADU,EACVA,IACpB,OACE,cAAC,IAAD,CAAME,MAAO,CAAEC,aAAc,QAA7B,SACE,eAAC,IAAD,CAAK5C,OAAQ,CAAC,EAAG,IAAjB,UACE,cAAC,IAAD,CAAKwB,KAAM,GAAX,SACE,eAACF,EAAD,WACE,0CACA,cAAC,EAAD,CAAQQ,MAAOA,SAGnB,cAAC,IAAD,CAAQa,MAAO,CAAEE,YAAa,QAAU5C,QAASuC,EAAKM,KAAM,cAACC,EAAA,EAAD,IAA5D,oBAGA,cAAC,IAAD,CAAQ9C,QAASwC,EAAKK,KAAM,cAACE,EAAA,EAAD,IAA5B,yB,0BCnCIC,EASAC,E,4CClBCC,EAAaC,wBAIvB,CACDC,MAAO,KACPvB,MAAO,EACPwB,MAAO,CACL,CACEC,GAAI,QACJC,EAAG,GACHC,EAAG,GACHC,MAAO,GACPC,OAAQ,GACRC,MAAO,uCACPC,MAAO,OACPC,MAAO,CACLC,KAAM,CACJC,KAAM,UACNC,OAAQ,OACRC,gBAAiB,QAEnBN,MAAO,CACL9C,KAAM,UACNkD,KAAM,OACNG,SAAU,MAIhB,CACEZ,GAAI,QACJC,EAAG,IACHC,EAAG,IACHC,MAAO,GACPC,OAAQ,GACRC,MAAO,gBACPC,MAAO,c,mBD3BDZ,K,uBAAAA,E,2BAAAA,E,mCAAAA,E,iCAAAA,E,kCAAAA,M,cASAC,K,wBAAAA,M,KELZ,I,EAAMkB,EAA+B,CACnCC,WAAY,CACVC,MFhBU,oBEkBZC,KAAM,CACJC,KAAM,EACNC,SAAS,ICjBIlD,IAAOW,IAAV,uNAAd,I,MAWMjD,EAAO,CACXqE,MAAO,CACL,CACEC,GAAI,QACJC,EAAG,GACHC,EAAG,GACHC,MAAO,IACPC,OAAQ,GAeR1E,KAAM,CACJyF,KAAM,uBAMV,CACEnB,GAAI,QACJC,EAAG,IACHC,EAAG,IACHC,MAAO,IACPC,OAAQ,GAER1E,KAAM,CACJyF,KAAM,wBAQZC,MAAO,CACL,CACEC,OAAQ,QACRC,OAAQ,QACRf,MAAO,CACLgB,KAAM,CACJb,OAAQ,gBAGZJ,MAAO,UC9Db,IAAMkB,EAAmBxD,IAAOW,IAAV,iEAIhB8C,EAAiBzD,IAAOW,IAAV,oNAWd+C,EAAY1D,IAAOW,IAAV,wIAOTgD,EAAMC,IAAMD,IAEH,SAASE,IAAe,IAAD,EACE9F,mBAA2B,MAD7B,mBAC7B+F,EAD6B,KAChBC,EADgB,KAE5BjC,EAAUkC,uBAAapC,GAAvBE,MACFmC,EAAYC,uBAChB,SAACC,GACC,IAAMC,EAAI,OAAGtC,QAAH,IAAGA,OAAH,EAAGA,EAAOuC,WAAW,CAC7BlC,MAAO,IACPC,OAAQ,GACRJ,GAAI,QACJO,MAAO,CACLF,MAAO,CACL9C,KAAM,OACNkD,KAAM,WAERD,KAAM,CACJE,OAAQ,cACR4B,YAAa,IAGjBC,MAAO,CACLC,OAAQ,CACNC,OAAQ,CACNlC,MAAO,CACLmC,OAAQ,CACNC,EAAG,EACHC,QAAQ,EACRlC,OAAQ,UACR4B,YAAa,EACb7B,KAAM,WAKdoC,MAAO,CACL,CACE7C,GAAI,QACJ8C,MAAO,UAET,CACE9C,GAAI,QACJ8C,MAAO,UAET,CACE9C,GAAI,QACJ8C,MAAO,cAKfV,IAAI,OAAIN,QAAJ,IAAIA,KAAaiB,MAAMX,EAAMD,EAAEa,gBAErC,CAAClB,EAAahC,IAGhBmD,qBAAU,WACR,GAAKnD,EAAL,CACA,IAAMoD,EAAM,IAAIvB,EAAI,CAClBL,OAAQxB,EACRqD,QAAQ,EACRC,WAAW,EACXC,aAJkB,SAILC,EAAcC,GACzB,MAA8B,SAAvBD,EAAahD,OAChB,IAAIjE,SAAiB,SAAAC,GAKnBkH,YAAW,WAETlH,GAAQ,KACP,WAQbyF,EAAemB,MACd,CAACpD,IAOJ,OACE,cAAC0B,EAAD,UACE,eAACC,EAAD,WACE,cAACC,EAAD,CAAW+B,YAAaxB,IACxB,cAAC,IAAD,CAAQ7C,MAAO,CAAEsE,UAAW,QAAUhH,QAT5B,WACdgB,QAAQC,IAAI,cACZgG,IAAsBC,KAAtB,OAA2B9D,QAA3B,IAA2BA,OAA3B,EAA2BA,EAAO+D,WAO9B,2CC1HO,Q,MCOTC,GAAmB9F,IAAOW,IAAV,iFAKhBoF,GAAmB/F,IAAOW,IAAV,kEAKP,SAASqF,KACtB,IAAMC,EAAeC,iBAAuB,MACtCC,EAAaD,iBAAuB,OJO7B,YAA2E,IAAvDD,EAAsD,EAAtDA,aAAcE,EAAwC,EAAxCA,WACzCC,GADiF,EAA5BC,cAC1CH,oBAEXI,EAAmBC,wBAAc3E,GA4CvC,OA3CAqD,qBAAU,WACR,GAAKgB,EAAaO,SAAYL,EAAWK,QAAzC,CACAJ,EAASI,QAAU,IAAIC,IAAJ,2BACd5D,GADc,IAEjBV,MAAO8D,EAAaO,QAAQE,YAC5BtE,OAAQ6D,EAAaO,QAAQG,aAC7BC,UAAWT,EAAWK,QACtB3I,SAAS,EAETgJ,SAAU,CACRC,SAAS,EACTC,OAAO,GASTC,UAAW,CACTF,SAAS,EACTG,UAAW,iBACXC,sBAAsB,MAI1BZ,GAAiB,SAAAa,GAAI,kCAChBA,GADgB,IAEnBrF,MAAOsE,EAASI,aAGlB,IAAMY,EAASC,oBAAS,WAAO,IAAD,MAC5B,UAAAjB,EAASI,eAAT,SAAkBc,YAAlB,UAA8BrB,EAAaO,eAA3C,aAA8B,EAAsBE,YAApD,UAAiET,EAAaO,eAA9E,aAAiE,EAAsBG,gBACtF,KAEH,OADAY,OAAOC,iBAAiB,SAAUJ,GAC3B,WAAO,IAAD,EACXK,IAAQ7B,KAAK,sBACb2B,OAAOG,oBAAoB,SAAUN,GACrC,UAAAhB,EAASI,eAAT,SAAkBmB,cAEnB,CAAC1B,EAAcE,EAAYG,IAEvB,CAAEF,aIrDYwB,CAAS,CAAE3B,eAAcE,eAAtCC,SAGR,OHoDa,WAAyB,IAC9BtE,EAAUkC,uBAAapC,GAAvBE,MACRmD,qBAAU,WACHnD,GACLA,EAAM+F,SAASnK,KAWd,CAACoE,IGrEJgG,GAGE,eAAChC,GAAD,WACE,cAACjC,EAAD,IACA,cAACkC,GAAD,CAAkBgC,IAAK9B,EAAvB,SACE,qBAAK8B,IAAK5B,SCvBlB,I,GAwBe6B,GAxBA,CACb,CACEC,KAAM,YACNC,UCFW,SAAiB/H,GAC9B,IAIMgI,EACJ,cAAC,IAAD,UACE,eAAC,IAAD,CAAK1J,OAAQ,CAAC,GAAI,IAAlB,UACE,cAAC,IAAD,CAAKwB,KAAM,GAAX,SACE,cAAC,IAAD,CAAO3C,QAAQ,2CAAuB8K,KAAK,YAE7C,cAAC,IAAD,CAAKnI,KAAM,GAAX,SACE,cAAC,IAAD,CAAQmI,KAAK,UAAU1J,QAAS,kBAAM2J,SAASC,UAA/C,6CAQR,OACE,qCACE,cAACvH,EAAD,IACA,cAAC,IAAD,CAAewH,QAtBH,SAAC5K,EAAc6K,GAC7B9I,QAAQC,IAAI,8BAqBuB8I,SAAUN,EAA3C,SACE,cAACvK,EAAD,UDrBJ8K,KAAM,CACJC,MAAO,mCAGX,CACEV,KAAM,YACNC,UEXW,WACb,IAAMrK,EAAUC,cAChB,OACE,eAAC,IAAD,WACE,4EACA,cAAC,IAAD,CAAQY,QAAS,kBAAMb,EAAQiC,KAAK,cAApC,4DFOF4I,KAAM,CACJC,MAAO,mCAGX,CACEV,KAAM,iBACNC,UGlBW,WACb,OAAO,cAAClC,GAAD,KHkBL0C,KAAM,CACJC,MAAO,cIlBLC,GAAUC,IAAVD,MACFE,GAAc9I,IAAOW,IAAV,+KASF,SAASoI,KAAa,IAAD,EACPjL,cAAnBuK,EAD0B,EAC1BA,SAAUvI,EADgB,EAChBA,KADgB,EAEJ/B,mBAAiB,IAFb,mBAE3BiL,EAF2B,KAElBC,EAFkB,KAGlChE,qBAAU,WACJ+C,GAAOkB,MAAK,SAAAC,GAAI,OAAIA,EAAKlB,OAASI,EAASe,aAC7CH,EAAWZ,EAASe,YAErB,CAACf,IAKJ,OACE,eAACO,GAAD,CAAOxH,MAAO,CAAEiI,gBAAiB,SAAjC,UACE,cAACP,GAAD,gCACA,cAAC,IAAD,CAAMpK,QAPU,SAAC4K,GACnBxJ,EAAKwJ,EAAMC,KACXN,EAAWK,EAAMC,MAKaC,MAAM,QAAQC,KAAK,SAASC,aAAc,CAACV,GAAvE,SACGhB,GAAO2B,KAAI,SAAAR,GAAI,OACd,cAAC,IAAKS,KAAN,UAA4BT,EAAKT,KAAKC,OAAtBQ,EAAKlB,c,oBC7BvB4B,GAAWhB,IAAXgB,OACFC,GAAwB9J,YAAO+J,KAAP/J,CAAH,sEAIrBgK,GAAgBhK,YAAO6J,GAAP7J,CAAH,kIAcJiK,GARI,WACjB,OACE,cAACD,GAAD,UACE,cAACF,GAAD,CAAuBpL,QAAS,kBAAM6I,OAAO1I,KAAK,0CCXhDqL,GAAYrB,IAAZqB,QAkCOC,GAhCI,WACjB,OACE,eAAC,IAAD,CAAQ/I,MAAO,CAAEgB,OAAQ,QAAzB,UACE,cAAC2G,GAAD,IACA,eAAC,IAAD,WACE,cAAC,GAAD,IACA,cAAC,GAAD,CAAS3H,MAAO,CAAEgJ,QAAS,QAA3B,SAOE,cAAC,IAAD,CAAKhJ,MAAO,CAAEgJ,QAAS,UAAY3L,OAAQ,CAAC,GAAI,IAAhD,SACE,cAAC,IAAD,CAAKwB,KAAM,GAAX,SACE,eAAC,IAAD,WACG+H,GAAO2B,KAAI,SAAAR,GAAI,OACd,cAAC,IAAD,CAAuBlB,KAAMkB,EAAKlB,KAAMC,UAAWiB,EAAKjB,WAA5CiB,EAAKlB,SAEnB,cAAC,IAAD,CAAUrH,GAAI,CAAEwI,SAAUpB,GAAO,GAAGC,wB,SCdrCoC,OAVf,WACE,OACE,cAAC,KAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOpC,KAAK,IAAIC,UAAWiC,U,UCJ3BG,GAAWC,EAAQ,KAAnBD,OAGKE,GAAeC,aAAK,CAC/BC,OAAQ,UACRC,IAAK,UACLC,eAAgB,IAChBC,OAAO,EACPC,eAAe,EACfC,eAAe,EACfC,4BAA6B,KAE7BC,kBAT+B,WASIxK,GAAS,IAAxBrB,EAAuB,EAAvBA,OAAuB,EAAf8L,IACX,QAAX9L,GACFqB,EAAO3B,iBAAiB,SAAU,eAKtCwL,GAAOvF,MAAM,CACXoG,cAAe,CACbD,IAAK,0CAWXE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAcd,aAAcA,GAA5B,SACE,cAAC,GAAD,QAGJe,SAASC,eAAe,U,2GCvCbC,EAAW,CACtBC,IAAKC,IAAI,WAAW,SAACC,EAAKtM,EAAKuM,GAC7B,OAAOvM,EACLuM,EAAI1O,OAAO,KACX0O,EAAIC,KAAK,CACPpO,KAAM,2BAIZgO,IAAKC,IAAI,aAAa,SAACC,EAAKtM,EAAKuM,GAC/B,OAAOvM,EACLuM,EAAI1O,OAAO,KACX0O,EAAIC,KAAK,CACPpO,KAAM,6BAIZgO,IAAKK,KAAK,WAAW,SAACC,EAAG1M,EAAKuM,GAC5B,OAAOvM,EACLuM,EAAI1O,OAAO,KACX0O,EAAIC,KAAK,CACPpO,KAAM,YCnBD4M,EAAS2B,IAAW,WAAX,cAAeR,M","file":"static/js/main.9abd715b.chunk.js","sourcesContent":["import { Button, Card, Col, message, Row } from 'antd'\nimport { useHistory } from 'react-router-dom'\nimport { useState } from 'react'\n\nenum RequestTypes {\n  Xhr = 'Xhr',\n  Fetch = 'Fetch',\n}\nconst printMessage = (status: number, responseText: string, requestType: RequestTypes) => {\n  if (status === 200) {\n    message.success(`${requestType}请求成功：${JSON.parse(responseText).data}`)\n  } else {\n    message.error(`${requestType}请求失败：${JSON.parse(responseText).data}`)\n  }\n}\nexport default function BtnContainer() {\n  const history = useHistory()\n  const [isRenderError, setIsRenderError] = useState(false)\n  const onClickNormalXhr = () => {\n    const xhr = new XMLHttpRequest()\n    xhr.open('get', '/normal')\n    xhr.setRequestHeader('content-type', 'application/json')\n    xhr.send()\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState === 4) {\n        printMessage(xhr.status, xhr.responseText, RequestTypes.Xhr)\n      }\n    }\n  }\n  const onClickAbnormalXhr = () => {\n    const xhr = new XMLHttpRequest()\n    xhr.open('get', '/abnormal')\n    xhr.setRequestHeader('content-type', 'application/json')\n    xhr.send()\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState === 4) {\n        printMessage(xhr.status, xhr.responseText, RequestTypes.Xhr)\n      }\n    }\n  }\n  const onClickNormalFetch = () => {\n    fetch('/normal', {\n      method: 'GET',\n    }).then(\n      res => {\n        res.text().then(responseText => {\n          printMessage(res.status, responseText, RequestTypes.Fetch)\n        })\n      },\n      err => {\n        console.log('err', err)\n      }\n    )\n  }\n  const onClickAbnormalFetch = () => {\n    fetch('/abnormal', {\n      method: 'GET',\n    }).then(\n      res => {\n        res.text().then(responseText => {\n          printMessage(res.status, responseText, RequestTypes.Fetch)\n        })\n      },\n      err => {\n        console.log('err', err)\n      }\n    )\n  }\n  const onClickTriggerUnhandledrejection = async () => {\n    const promise = new Promise((resolve, reject) => {\n      reject('this is a reject message in Promise')\n    })\n    await promise\n  }\n  const onClickTriggerCodeError = () => {\n    const obj = {} as any\n    // create code error\n    obj.noObj.noField = 'no field'\n  }\n  const onClickPushRoute = () => {\n    history.push('/page-two')\n  }\n  const onClickMitoLog = () => {\n    // log({\n    //   message: 'this is message',\n    //   tag: 'this is tag',\n    // })\n  }\n  const onClickRenderError = () => {\n    setIsRenderError(true)\n  }\n  if (isRenderError) {\n    throw new Error('is Render error')\n  } else {\n    return (\n      <Card>\n        <Row gutter={[10, 10]}>\n          <Col>\n            <Button onClick={onClickNormalXhr}>触发正常Xhr</Button>\n          </Col>\n          <Col>\n            <Button onClick={onClickAbnormalXhr}>触发异常Xhr</Button>\n          </Col>\n          <Col>\n            <Button onClick={onClickNormalFetch}>触发正常Fetch</Button>\n          </Col>\n          <Col>\n            <Button onClick={onClickAbnormalFetch}>触发异常Fetch</Button>\n          </Col>\n          <Col>\n            <Button onClick={onClickTriggerUnhandledrejection}>触发Promise错误</Button>\n          </Col>\n          <Col>\n            <Button onClick={onClickTriggerCodeError}>触发代码错误</Button>\n          </Col>\n          <Col>\n            <Button onClick={onClickMitoLog}>手动上报MITO.log</Button>\n          </Col>\n          <Col>\n            <Button onClick={onClickRenderError}>触发render错误</Button>\n          </Col>\n          <Col>\n            <Button onClick={onClickPushRoute}>路由跳转</Button>\n          </Col>\n        </Row>\n      </Card>\n    )\n  }\n}\n","import { Button, Card, Col, Row } from 'antd'\nimport React, { useState } from 'react'\nimport { PlusOutlined, MinusOutlined } from '@ant-design/icons'\nimport styled from 'styled-components'\nimport { animated, config, useSpring } from 'react-spring'\nconst useCount = () => {\n  const [count, setCount] = useState<number>(0)\n  const add = () => {\n    setCount(count + 1)\n  }\n  const sub = () => {\n    setCount(count - 1)\n  }\n  return { count, add, sub }\n}\nconst DivWrapper = styled.span`\n  font-size: 26px;\n  display: flex;\n  justify-content: flex-start;\n`\nfunction Number(props: { count: number }) {\n  const { number } = useSpring({\n    // reset: true,\n    // reverse: flip,\n    from: { number: 0 },\n    number: props.count,\n    delay: 200,\n    config: config.molasses,\n    // onRest: () => set(!flip),\n  })\n\n  return <animated.div>{number.to(c => c.toFixed(1))}</animated.div>\n}\nexport default function Count() {\n  const { count, add, sub } = useCount()\n  return (\n    <Card style={{ marginBottom: '10px' }}>\n      <Row gutter={[0, 10]}>\n        <Col span={24}>\n          <DivWrapper>\n            <div>Count: </div>\n            <Number count={count}></Number>\n          </DivWrapper>\n        </Col>\n        <Button style={{ marginRight: '10px' }} onClick={add} icon={<PlusOutlined />}>\n          加\n        </Button>\n        <Button onClick={sub} icon={<MinusOutlined />}>\n          减\n        </Button>\n      </Row>\n    </Card>\n  )\n}\n","export const graphStyle = {\n  // 背景颜色\n  background: 'rgb(242,243,244)',\n}\n\nexport const GROUP_HORIZONTAL__PADDING = 24 // 分组横向 padding\nexport const GROUP_VERTICAL__PADDING = 40 // 分组纵向 padding\nexport const NODE_WIDTH = 180\nexport const NODE_HEIGHT = 32\n\nexport const React_Shape = 'react-shape'\n\nexport enum NodeEventNameTypes {\n  // node\n  NodeClick = 'node:click',\n  NodeRemoved = 'node:removed',\n  NodeContextMenu = 'node:contextmenu',\n  NodeMouseEnter = 'node:mouseenter',\n  NodeMouseLeave = 'node:mouseleave',\n}\n\nexport enum EdgeEventNameTypes {\n  EdgeClick = 'edge:click',\n}\n","import { Graph } from '@antv/x6'\nimport { atomWithReset } from 'jotai/utils'\n\nexport const xGraphAtom = atomWithReset<{\n  graph: Graph | null\n  nodes: any[]\n  count: number\n}>({\n  graph: null,\n  count: 0,\n  nodes: [\n    {\n      id: 'node1', // String，可选，节点的唯一标识\n      x: 40, // Number，必选，节点位置的 x 值\n      y: 40, // Number，必选，节点位置的 y 值\n      width: 80, // Number，可选，节点大小的 width 值\n      height: 40, // Number，可选，节点大小的 height 值\n      label: 'attrs label 会覆盖掉', // String，节点标签\n      shape: 'rect',\n      attrs: {\n        body: {\n          fill: '#2ECC71',\n          stroke: '#000',\n          strokeDasharray: '10,2',\n        },\n        label: {\n          text: 'a12312a',\n          fill: '#333',\n          fontSize: 13,\n        },\n      },\n    },\n    {\n      id: 'node2', // String，节点的唯一标识\n      x: 160, // Number，必选，节点位置的 x 值\n      y: 180, // Number，必选，节点位置的 y 值\n      width: 80, // Number，可选，节点大小的 width 值\n      height: 40, // Number，可选，节点大小的 height 值\n      label: '测试2', // String，节点标签\n      shape: 'ellipse', // 使用 ellipse 渲染\n    },\n  ],\n})\n","import { Graph } from '@antv/x6'\nimport React, { useEffect, useRef } from 'react'\nimport consola from 'consola'\nimport { useUpdateAtom, useAtomValue } from 'jotai/utils'\nimport { xGraphAtom } from '../state/atoms'\nimport { debounce } from 'lodash'\nimport { graphStyle } from '../constants/graph'\n\ntype X6GraphOptions = ConstructorParameters<typeof Graph>[0]\n\ntype PropsType = {\n  containerRef: React.RefObject<HTMLDivElement>\n  contentRef: React.RefObject<HTMLDivElement>\n  minimapBoxRef?: React.RefObject<HTMLDivElement>\n}\n\nconst GraphSetting: X6GraphOptions = {\n  background: {\n    color: graphStyle.background,\n  },\n  grid: {\n    size: 6, // 网格大小 10px\n    visible: true, // 渲染网格背景\n  },\n}\n\nexport default function useGraph({ containerRef, contentRef, minimapBoxRef }: PropsType) {\n  const graphRef = useRef<Graph>()\n\n  const updateGraphState = useUpdateAtom(xGraphAtom)\n  useEffect(() => {\n    if (!containerRef.current || !contentRef.current) return\n    graphRef.current = new Graph({\n      ...GraphSetting,\n      width: containerRef.current.clientWidth,\n      height: containerRef.current.clientHeight,\n      container: contentRef.current,\n      history: true,\n      // 对齐线： https://x6.antv.vision/zh/docs/tutorial/basic/snapline\n      snapline: {\n        enabled: true,\n        sharp: true,\n      },\n      // 滚动： https://x6.antv.vision/zh/docs/tutorial/basic/scroller/\n      // scroller: {\n      //   enabled: true,\n      //   pageVisible: false,\n      //   pageBreak: false,\n      //   pannable: true,\n      // },\n      selecting: {\n        enabled: true,\n        className: 'node-selecting',\n        showNodeSelectionBox: true,\n      },\n    })\n\n    updateGraphState(prev => ({\n      ...prev,\n      graph: graphRef.current as Graph,\n    }))\n\n    const resize = debounce(() => {\n      graphRef.current?.resizeGraph(containerRef.current?.clientWidth, containerRef.current?.clientHeight)\n    }, 300)\n    window.addEventListener('resize', resize)\n    return () => {\n      consola.info('x6 graph destroied')\n      window.removeEventListener('resize', resize)\n      graphRef.current?.dispose()\n    }\n  }, [containerRef, contentRef, updateGraphState])\n\n  return { graphRef }\n}\n","import { useAtomValue } from 'jotai/utils'\nimport React, { useEffect } from 'react'\nimport styled from 'styled-components'\nimport { React_Shape } from '../constants/graph'\nimport { xGraphAtom } from '../state/atoms'\nconst NodeWrap = styled.div`\n  width: 100px;\n  height: 50px;\n  border-radius: 5px;\n  text-align: center;\n  line-height: 50px;\n  border: 2px solid deepskyblue;\n  border-radius: 4px;\n  background-color: white;\n`\nconst Content = ({ name }: { name: string }) => <NodeWrap>{name}</NodeWrap>\nconst data = {\n  nodes: [\n    {\n      id: 'node1', // String，可选，节点的唯一标识\n      x: 40, // Number，必选，节点位置的 x 值\n      y: 40, // Number，必选，节点位置的 y 值\n      width: 100, // Number，可选，节点大小的 width 值\n      height: 50, // Number，可选，节点大小的 height 值\n      // shape: React_Shape,\n      // label: 'attrs label 会覆盖掉', // String，节点标签\n      // attrs: {\n      //   body: {\n      //     fill: '#2ECC71',\n      //     stroke: '#000',\n      //     strokeDasharray: '10,2',\n      //   },\n      //   label: {\n      //     // text: '初始化节点一',\n      //     fill: '#333',\n      //     fontSize: 13,\n      //   },\n      // },\n      data: {\n        name: '节点一',\n      },\n      // component(node) {\n      //   return <Content name={node.data.name} />\n      // },\n    },\n    {\n      id: 'node2', // String，节点的唯一标识\n      x: 160, // Number，必选，节点位置的 x 值\n      y: 180, // Number，必选，节点位置的 y 值\n      width: 100, // Number，可选，节点大小的 width 值\n      height: 50, // Number，可选，节点大小的 height 值\n      // shape: React_Shape, // 使用 ellipse 渲染\n      data: {\n        name: '节点二',\n      },\n      // component(node) {\n      //   return <Content name={node.data.name} />\n      // },\n    },\n  ],\n  // 边\n  edges: [\n    {\n      source: 'node1', // String，必须，起始节点 id\n      target: 'node2', // String，必须，目标节点 id\n      attrs: {\n        line: {\n          stroke: 'deepskyblue',\n        },\n      },\n      shape: 'edge',\n    },\n  ],\n}\n\nexport default function useInitNodes() {\n  const { graph } = useAtomValue(xGraphAtom)\n  useEffect(() => {\n    if (!graph) return\n    graph.fromJSON(data)\n    // graph.addNode({\n    //   x: 40,\n    //   y: 40,\n    //   width: 100,\n    //   height: 100,\n    //   shape: 'react-shape',\n    //   component(node) {\n    //     return <Content />\n    //   },\n    // })\n  }, [graph])\n}\n","import { Addon } from '@antv/x6'\nimport { Button } from 'antd'\nimport consolaGlobalInstance from 'consola'\nimport { useAtomValue } from 'jotai/utils'\nimport React, { useCallback, useEffect, useRef, useState } from 'react'\nimport styled from 'styled-components'\nimport { xGraphAtom } from '../state/atoms'\n\nconst StencilContainer = styled.div`\n  flex: 0 0 150px;\n  height: 100%;\n`\nconst StencilContent = styled.div`\n  display: flex;\n  padding: 16px;\n  flex: 0 0 150px;\n  flex-direction: column;\n  justify-content: flex-start;\n  background-color: white;\n  height: 100%;\n  align-items: center;\n`\n\nconst NodeStyle = styled.div`\n  border: 2px solid deepskyblue;\n  border-radius: 4px;\n  width: 100px;\n  height: 50px;\n  cursor: move;\n`\nconst Dnd = Addon.Dnd\n\nexport default function StencilWrap() {\n  const [dndInstance, setDndInstance] = useState<Addon.Dnd | null>(null)\n  const { graph } = useAtomValue(xGraphAtom)\n  const startDrag = useCallback(\n    (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      const node = graph?.createNode({\n        width: 100,\n        height: 50,\n        id: 'node3',\n        attrs: {\n          label: {\n            text: 'Rect',\n            fill: '#6a6c8a',\n          },\n          body: {\n            stroke: 'deepskyblue',\n            strokeWidth: 2,\n          },\n        },\n        ports: {\n          groups: {\n            group1: {\n              attrs: {\n                circle: {\n                  r: 6,\n                  magnet: true,\n                  stroke: '#31d0c6',\n                  strokeWidth: 2,\n                  fill: '#fff',\n                },\n              },\n            },\n          },\n          items: [\n            {\n              id: 'port1',\n              group: 'group1', // 指定分组名称\n            },\n            {\n              id: 'port2',\n              group: 'group1', // 指定分组名称\n            },\n            {\n              id: 'port3',\n              group: 'group1', // 指定分组名称\n            },\n          ],\n        },\n      })\n      node && dndInstance?.start(node, e.nativeEvent)\n    },\n    [dndInstance, graph]\n  )\n\n  useEffect(() => {\n    if (!graph) return\n    const dnd = new Dnd({\n      target: graph,\n      scaled: false,\n      animation: true,\n      validateNode(droppingNode, options) {\n        return droppingNode.shape === 'html'\n          ? new Promise<boolean>(resolve => {\n              // const { draggingNode, draggingGraph } = options\n              // const view = draggingGraph.findView(draggingNode)\n              // const contentElem = view.findOne('foreignObject > body > div')\n              // Dom.addClass(contentElem, 'validating')\n              setTimeout(() => {\n                // Dom.removeClass(contentElem, 'validating')\n                resolve(true)\n              }, 3000)\n            })\n          : true\n      },\n      //防止重置Id\n      // getDragNode: node => node.clone({ keepId: true }),\n      // getDropNode: node => node.clone({ keepId: true }),\n    })\n    setDndInstance(dnd)\n  }, [graph])\n\n  const onClick = () => {\n    console.log('graph data')\n    consolaGlobalInstance.info(graph?.toJSON())\n  }\n\n  return (\n    <StencilContainer>\n      <StencilContent>\n        <NodeStyle onMouseDown={startDrag}></NodeStyle>\n        <Button style={{ marginTop: '20px' }} onClick={onClick}>\n          打印数据\n        </Button>\n      </StencilContent>\n    </StencilContainer>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/style.4fe1275f.less\";","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport useGraph from './hooks/useGraph'\nimport useInitNodes from './hooks/useInitNodes'\nimport StencilWrap from './Stencil/Stencil'\nimport './styles/style.less'\n// import '@antv/x6-react-shape'\nconst TopologyCotainer = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n`\nconst ContentContainer = styled.div`\n  flex: 1 1 auto;\n  height: 100%;\n`\n// type PropsTypes = {}\nexport default function XTopology() {\n  const containerRef = useRef<HTMLDivElement>(null)\n  const contentRef = useRef<HTMLDivElement>(null)\n  const { graphRef } = useGraph({ containerRef, contentRef })\n  useInitNodes()\n\n  return (\n    <TopologyCotainer>\n      <StencilWrap />\n      <ContentContainer ref={containerRef}>\n        <div ref={contentRef}></div>\n      </ContentContainer>\n    </TopologyCotainer>\n  )\n}\n","import PageOne from '../pages/PageOne/PageOne'\nimport PageTwo from '../pages/PageTwo'\nimport Topology from '../pages/Topology/Topology'\n\nconst routes = [\n  {\n    path: '/page-one',\n    component: PageOne,\n    meta: {\n      title: '示例页面一',\n    },\n  },\n  {\n    path: '/page-two',\n    component: PageTwo,\n    meta: {\n      title: '示例页面二',\n    },\n  },\n  {\n    path: '/page-topology',\n    component: Topology,\n    meta: {\n      title: 'topology',\n    },\n  },\n]\n\nexport default routes\n","import { RouterProps } from 'react-router-dom'\nimport BtnContainer from './BtnContainer'\nimport Count from './Count'\nimport { ErrorBoundary } from '@mitojs/react'\nimport { Alert, Button, Card, Col, Row } from 'antd'\nexport default function PageOne(props: RouterProps) {\n  const onError = (error: Error, componentStack: string) => {\n    console.log('triggered is render error')\n    // console.log(error, componentStack)\n  }\n  const ErrorFallback = (\n    <Card>\n      <Row gutter={[20, 20]}>\n        <Col span={24}>\n          <Alert message='Oops，触发了render error' type='error'></Alert>\n        </Col>\n        <Col span={24}>\n          <Button type='primary' onClick={() => location.reload()}>\n            点击刷新\n          </Button>\n        </Col>\n      </Row>\n    </Card>\n  )\n\n  return (\n    <>\n      <Count></Count>\n      <ErrorBoundary onError={onError} fallback={ErrorFallback}>\n        <BtnContainer></BtnContainer>\n      </ErrorBoundary>\n    </>\n  )\n}\n","import { Button, Card } from 'antd'\nimport { useHistory } from 'react-router-dom'\n\nexport default function PageTwo() {\n  const history = useHistory()\n  return (\n    <Card>\n      <h1>这是示例页面二</h1>\n      <Button onClick={() => history.push('/page-one')}>跳转实例页面一</Button>\n    </Card>\n  )\n}\n","import React from 'react'\nimport XTopology from '../../components/XTopology/XTopology'\n\nexport default function Topology() {\n  return <XTopology></XTopology>\n}\n","import { useEffect, useState } from 'react'\nimport { Layout, Menu } from 'antd'\nimport styled from 'styled-components'\nimport routes from '../router/routes'\nimport { useHistory } from 'react-router-dom'\nconst { Sider } = Layout\nconst LogoWrapper = styled.div`\n  font-size: 22px;\n  width: 100%;\n  height: 64px;\n  background-color: #1890ff;\n  color: white;\n  text-align: center;\n  line-height: 64px;\n`\nexport default function SiderMenu() {\n  const { location, push } = useHistory()\n  const [curMenu, setCurMenu] = useState<string>('')\n  useEffect(() => {\n    if (routes.some(item => item.path === location.pathname)) {\n      setCurMenu(location.pathname)\n    }\n  }, [location])\n  const handleClick = (value: { key: string }) => {\n    push(value.key)\n    setCurMenu(value.key)\n  }\n  return (\n    <Sider style={{ backgroundColor: 'white' }}>\n      <LogoWrapper>mitojs-react-demo</LogoWrapper>\n      <Menu onClick={handleClick} theme='light' mode='inline' selectedKeys={[curMenu]}>\n        {routes.map(item => (\n          <Menu.Item key={item.path}>{item.meta.title}</Menu.Item>\n        ))}\n      </Menu>\n    </Sider>\n  )\n}\n","import { Layout } from 'antd'\nimport { GithubOutlined } from '@ant-design/icons'\nimport styled from 'styled-components'\nconst { Header } = Layout\nconst GithubOutlinedWrapper = styled(GithubOutlined)`\n  font-size: 22px;\n  cursor: pointer;\n`\nconst HeaderWrapper = styled(Header)`\n  background-color: white;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n`\nconst BaseHeader = () => {\n  return (\n    <HeaderWrapper>\n      <GithubOutlinedWrapper onClick={() => window.open('https://github.com/mitojs/mitojs')} />\n    </HeaderWrapper>\n  )\n}\n\nexport default BaseHeader\n","import { Redirect, Route, Switch } from 'react-router-dom'\nimport { Alert, Col, Layout, Row } from 'antd'\nimport SiderMenu from './SiderMenu'\nimport BaseHeader from './BaseHeader'\nimport routes from '../router/routes'\nimport IframeBreadcurmb from './IframeBreadcurmb'\nconst { Content } = Layout\n\nconst BaseLayout = () => {\n  return (\n    <Layout style={{ height: '100%' }}>\n      <SiderMenu />\n      <Layout>\n        <BaseHeader />\n        <Content style={{ padding: '10px' }}>\n          {/* <Alert\n            message='提示信息'\n            description='右侧的Breadcrumb组件会实时打印的你操作行为。控制台会打印当前收集的信息。在控制台输入「MitoInstance」查看当前mito实例'\n            type='info'\n            showIcon\n          /> */}\n          <Row style={{ padding: '10px 0' }} gutter={[10, 10]}>\n            <Col span={24}>\n              <Switch>\n                {routes.map(item => (\n                  <Route key={item.path} path={item.path} component={item.component}></Route>\n                ))}\n                <Redirect to={{ pathname: routes[0].path }}></Redirect>\n              </Switch>\n            </Col>\n            {/* <Col span={16} style={{ height: '602px' }}>\n              <IframeBreadcurmb></IframeBreadcurmb>\n            </Col> */}\n          </Row>\n        </Content>\n      </Layout>\n    </Layout>\n  )\n}\n\nexport default BaseLayout\n","import './App.css'\nimport BaseLayout from './layout/BaseLayout'\nimport { HashRouter, Route, Switch } from 'react-router-dom'\nfunction App() {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route path='/' component={BaseLayout}></Route>\n      </Switch>\n    </HashRouter>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nconst { worker } = require('./mocks/browser')\nimport { MitoProvider } from '@mitojs/react'\nimport { BrowserClient, init } from '@mitojs/browser'\nexport const MitoInstance = init({\n  apikey: 'abc-123',\n  dsn: '/upload',\n  maxBreadcrumbs: 100,\n  debug: true,\n  silentConsole: true,\n  enableTraceId: true,\n  includeHttpUrlTraceIdRegExp: /.*/,\n  // 请求方法为get的时候添加请求头\n  beforeAppAjaxSend({ method, url }, config) {\n    if (method === 'GET') {\n      config.setRequestHeader('get-id', 'mito-get')\n    }\n  },\n})\nif (process.env.NODE_ENV === 'production') {\n  worker.start({\n    serviceWorker: {\n      url: '/react-sdk-demo/mockServiceWorker.js',\n    },\n  })\n} else {\n  worker.start()\n}\n\nexport interface WindowType extends Window {\n  MitoInstance: BrowserClient\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <MitoProvider MitoInstance={MitoInstance}>\n      <App />\n    </MitoProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n","import { rest } from 'msw'\n\nexport const handlers = [\n  rest.get('/normal', (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({\n        data: 'Normal Get Request',\n      })\n    )\n  }),\n  rest.get('/abnormal', (req, res, ctx) => {\n    return res(\n      ctx.status(500),\n      ctx.json({\n        data: 'Abnormal Get Request',\n      })\n    )\n  }),\n  rest.post('/upload', (_, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({\n        data: 'ok',\n      })\n    )\n  }),\n  // rest.post('/abnormal', (req, res, ctx) => {\n  //   return res(\n  //     ctx.status(500),\n  //     ctx.json({\n  //       data: 'Abnormal Post Request',\n  //     })\n  //   )\n  // }),\n]\n","// src/mocks/browser.js\nimport { setupWorker } from 'msw'\nimport { handlers } from './handlers'\n// This configures a Service Worker with the given request handlers.\nexport const worker = setupWorker(...handlers)\n"],"sourceRoot":""}